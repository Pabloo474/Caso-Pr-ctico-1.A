pipeline {
    agent any

    stages {

        stage('Unit') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat """
                        SET PYTHONPATH=%WORKSPACE%
                        coverage run --source=app --omit=app\\__init__.py,app\\api.py -m pytest --junitxml=result-unit.xml test\\unit
                    """
                    junit 'result*.xml'
                }
            }
        }

        stage('Parallel Tests') {
            parallel {
                stage('Cobertura') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat """
                                coverage xml
                            """
                            cobertura autoUpdateHealth: false, 
                                autoUpdateStability: false, 
                                coberturaReportFile: 'coverage.xml', 
                                conditionalCoverageTargets: '90, 80, 0',  // cobertura condicional: verde: >= 90, unstable: 80-90, rojo: < 80
                                lineCoverageTargets: '95, 85, 0',        // cobertura por lÃ­neas: verde: >= 95, unstable: 85-95, rojo: < 85
                                maxNumberOfBuilds: 0, 
                                onlyStable: false, 
                                sourceEncoding: 'ASCII', 
                                zoomCoverageChart: false
                        }
                    }
                }

                stage('Static') {
                    steps {
                        bat """
                            flake8 --exit-zero --format=pylint --max-line-length 120 app >flake8.out
                        """
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold:8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                    }
                }

                stage('Security') {
                    steps {
                        bat """
                            bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: {severity}: {test_id}: {msg}"
                        """
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold:2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                    }
                }
            }
        }

        stage('Rest') {
            steps {
                bat '''
                    SET FLASK_APP=app\\api.py
                    SET FLASK_ENV=development
                    start flask run
                    start java -jar C:\\Users\\Pablox\\Desktop\\jenkins\\DevOps\\Caso-Pr-ctico-1.A\\wiremock-standalone-3.5.4.jar --port 9090 --root-dir test\\wiremock
                    SET PYTHONPATH=%WORKSPACE%
                    pytest --junitxml=result-rest.xml test\\rest
                '''
            }
        }

        stage('Performance') {
            steps {
                bat 'C:\\Users\\Pablox\\Desktop\\jenkins\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl'
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }

    }
}
